stages:
  - upload
  - test
  - deploy

variables:
  PROJECT_ROOT: /var/www/html
  PWA_DIR: /var/www/pwa
  WEB_DOCUMENT_ROOT: $PROJECT_ROOT/public
  LOG_STDOUT: $PROJECT_ROOT/var/log/stdout.log
  GIT_STRATEGY: clone
  NPM_CONFIG_CACHE: $PROJECT_ROOT/.cache/npm
  PM2_HOME: $PROJECT_ROOT/.cache/pm2
  COMPOSER_HOME: $PROJECT_ROOT/.cache/composer
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$PLUGIN_NAME
  DOCKWARE_CI: '1'
  SW_API_ACCESS_KEY: 'SWSCS3JDYJVWYNLUNW1YDENIAG'
  SW_ACCESS_KEY: $SW_API_ACCESS_KEY
  SW_LANG_ID: '2fbb5fe2e29a4d70aa5854ce7ce3e20b'
  APP_ENV: 'dev'
  APP_DEBUG: '0'
  XDEBUG_ENABLED: '0'
  PHP_VERSION: '8.2'
  PLATFORM_BRANCH: '6.6.8.2'
  # things plugins might want to override
  PLUGIN_NAME: 'SgateWebcheckoutSW6'
  PLUGIN_COMPOSER: 'shopgate/webcheckout-shopware6'

test:
  image: dockware/dev:$PLATFORM_BRANCH
  stage: test
  tags:
    - build-arm64
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'
  cache:
    key: $PLUGIN_NAME-$PLATFORM_BRANCH
    policy: pull
    paths:
      - .cache
  before_script:
    - export LANG="en_US.UTF-8"
    - export APP_URL="http://$HOSTNAME"
    - export SW_ENDPOINT=$APP_URL
    - cd $PROJECT_ROOT
    - '[ -d $CI_PROJECT_DIR/.cache ] && mv $CI_PROJECT_DIR/.cache $PROJECT_ROOT/'
    - make -C $PROJECT_ROOT/../ xdebug-off
    - composer require --prefer-source $PLUGIN_COMPOSER
    - bin/console plugin:refresh --quiet
    - bin/console plugin:install --activate $PLUGIN_NAME --quiet
    - bin/console sales-channel:update:domain "$HOSTNAME"
    - bin/console secrets:set APP_SECRET --random --quiet
    - bin/console secrets:set APP_SECRET --random --local --quiet
    - bin/console secrets:list --reveal
    - >
      if bin/console debug:container --parameter kernel.plugin_infos --format json | grep -q "$PLUGIN_NAME";
        then echo "$PLUGIN_NAME is active";
        else echo "$PLUGIN_NAME is not active"; exit 1;
      fi
    - mkdir -p $PWA_DIR
    - cd $PWA_DIR
    - nvm install 12.22.10 --default
    - npm set unsafe-perm true --silent
    - npm install --silent -g @shopgate/platform-sdk@1.11.2
    - sgconnect login --username "${SG_USER}" --password "${SG_PASS}"
    - sgconnect init --appId "${APP_ID}" --force
    - cd ${PWA_DIR}/extensions
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/apite/shopgate/connect-engage/ext-shopware6-user.git
    - mkdir -p ${PWA_DIR}/extensions/$CI_PROJECT_NAME
    - cp -r $CI_PROJECT_DIR/* ${PWA_DIR}/extensions/$CI_PROJECT_NAME
    - npm run init --silent --prefix ${PWA_DIR}/extensions/ext-shopware6-user/extension
    - npm run init --silent --prefix ${PWA_DIR}/extensions/$CI_PROJECT_NAME/extension
    - sgconnect extension attach ext-shopware6-user $CI_PROJECT_NAME
    - touch $CI_PROJECT_DIR/backend_output.log
    - sgconnect backend start >> $CI_PROJECT_DIR/backend_output.log 2>&1 &
    - while IFS= read -r line; do
      if echo "$line" | grep -q "Pipeline proxy is listening on 8090"; then
      echo "Backend started successfully";
      break;
      fi;
      done < <(tail -f $CI_PROJECT_DIR/backend_output.log);
  script:
    - cd $CI_PROJECT_DIR/tests
    - npm install
    - npm run postman-ci -- --env-var="sw_host=$APP_URL"
      --env-var="domain=$APP_URL:8090"
      --reporter-htmlextra-export="$CI_PROJECT_DIR/postman-report.html"
      --reporter-junitfull-export="$CI_PROJECT_DIR/newman.junit.xml";
  after_script:
    - cd $PROJECT_ROOT
    - tar -czvf $CI_PROJECT_DIR/var_folder.tar.gz var/log || true
  artifacts:
    when: on_failure
    expire_in: 3 days
    reports:
      junit: newman.junit.xml
    paths:
      - ./postman-report.html
      - ./backend_output.log
      - ./var_folder.tar.gz

register package:
  image: dwdraju/alpine-curl-jq
  tags:
    - build-amd64
  services: [ ]
  stage: upload
  only:
    - tags
  before_script:
    - VERSION=$([[ -z "$CI_COMMIT_TAG" ]] && echo "$CI_COMMIT_REF_NAME" || echo "$CI_COMMIT_TAG")
    - PACKAGE_NAME=$(cat extension-config.json | jq -r '.id' | sed -e 's/\//-/g' | sed 's/@//g')
    - TAR_FILE=${PACKAGE_NAME}.${VERSION}.tar.gz
    - URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${VERSION}/$TAR_FILE
  script:
    - tar -zcvf ${TAR_FILE} ./*
    - >
      response=$(curl -s -w "\n%{http_code}" --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${TAR_FILE} ${URL})
    - code=$(echo "$response" | tail -n 1)
    - body=$(echo "$response" | head -n 1)
    - mkdir extensions
    - mv ${TAR_FILE} extensions/${TAR_FILE}
    # Output state information
    - if [ $code -eq 201 ]; then
      echo "Package created - Code $code - $body";
      else
      echo "Could not create package - Code $code - $body";
      exit 1;
      fi;

  artifacts:
    name: ${TAR_FILE}
    expire_in: never
    paths:
      - extensions/${TAR_FILE}

publish to shopgate:
  image: registry.gitlab.com/apite/shopgate/connect-engage/images/webc:latest
  services: [ ]
  stage: deploy
  tags:
    - build-amd64
  only:
    - tags
  variables:
    GIT_STRATEGY: none
  needs:
    - register package
  script:
    - cd extensions
    - ARTIFACT=$(find . -type f -name "*.tar.gz" -print -quit)
    - mkdir temp
    - tar -xvf ${ARTIFACT} -C ./temp/
    - cd temp/extension
    - chmod u+x post-install.sh
    - rm -rf ../tests
    # run npm so that post-install hook runs
    - npm run init
    - sgconnect extension upload temp --force
