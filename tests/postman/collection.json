{
	"info": {
		"_postman_id": "8cce5745-2837-4c7e-8682-7cbfbfb18884",
		"name": "WebC - SW6 - Cart",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5289226"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "init",
					"item": [
						{
							"name": "SWA: get sales channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Get Main Sales Channel data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0].name).to.be.eq('Storefront');\r",
											"    pm.environment.set(\"gen_salesChannel_id\", jsonData.data[0].id);\r",
											"    pm.environment.set(\"gen_salesChannel_currency_id\", jsonData.data[0].currencyId);\r",
											"    pm.environment.set(\"gen_salesChannel_navCat_id\", jsonData.data[0].navigationCategoryId);\r",
											"    pm.environment.set(\"gen_salesChannel_accessKey\", jsonData.data[0].accessKey);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"name\",\r\n          \"value\": \"Storefront\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/sales-channel",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"sales-channel"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: create unit kg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write\": {\r\n        \"entity\": \"unit\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_unit_kg_id}}\",\r\n                \"name\": \"kilo\",\r\n                \"shortCode\": \"kg\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: get any options",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"get any option id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).length.greaterThan(2);\r",
											"    const group = jsonData.data[1];\r",
											"    const grpOptions = group.relationships.options.data;\r",
											"    let index = 1;\r",
											"    grpOptions.forEach(option => {\r",
											"        pm.environment.set('gen_option'+index+'_id', option.id);\r",
											"        index++;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"associations\": {\r\n        \"options\": {\r\n            \"total-count-mode\": 1\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/property-group",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"property-group"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get shopware ver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"get SW version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.version).to.be.a('string');\r",
											"    pm.environment.set(\"gen_shopware_version\", jsonData.version);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/_info/config",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_info",
										"config"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "prod",
					"item": [
						{
							"name": "SWA: get variant child",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Get child ID\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const child = jsonData.data.filter(product => product.attributes.productNumber === 'SWDEMO10005.3');\r",
											"    pm.expect(child).length(1, 'Should have found a child product');\r",
											"    pm.environment.set('gen_product_variant_child_id', child[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/product/{{catalog_product_variant}}/children",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"product",
										"{{catalog_product_variant}}",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: create no stock prod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_noStock_id}}\",\r\n        \"name\" : \"API: out of stock product\",\r\n        \"productNumber\" : \"SG.CONNECT.DEMO.NO.STOCK.01\",\r\n        \"stock\": 0,\r\n        \"isCloseout\": true,\r\n        \"releaseDate\": \"2022-01-29T11:00:04.389+00:00\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_advPrices_id}}",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"clone",
										"product",
										"{{catalog_product_advPrices_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: create no stock backorder prod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_noStock_backorder_id}}\",\r\n        \"name\" : \"API: out of stock backorder product\",\r\n        \"productNumber\" : \"SG.CONNECT.DEMO.NO.STOCK.BACKORDER\",\r\n        \"stock\": 0,\r\n        \"isCloseout\": false,\r\n        \"releaseDate\": \"2022-01-29T11:00:04.389+00:00\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/clone/product/{{created_product_noStock_id}}",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"clone",
										"product",
										"{{created_product_noStock_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: re-index prod",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"offset\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/indexing/:indexer",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"indexing",
										":indexer"
									],
									"variable": [
										{
											"key": "indexer",
											"value": "product.indexer"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "promo",
					"item": [
						{
							"name": "3 item coupon",
							"item": [
								{
									"name": "SWA: create 3 item code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created entity successfully\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{created_promotion_3item_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API EXT: promo 3item code\",\r\n    \"code\": \"{{created_promotion_3item_code}}\",\r\n    \"exclusive\": false,\r\n    \"useCodes\": true,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 1.73\r\n        }\r\n    ],\r\n    \"salesChannels\":[\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/promotion",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"promotion"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: create 3 item rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// marked as temp because of ticket SGSW6-88\r",
													"pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"create-rules\": {\r\n        \"entity\": \"rule\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_rule_3item_id}}\",\r\n                \"name\": \"API EXT: Main Product 3 qty rule\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"andContainer\",\r\n                        \"value\": null,\r\n                        \"children\": [\r\n                            {\r\n                                \"type\": \"cartLineItemWithQuantity\",\r\n                                \"value\": {\r\n                                    \"id\": \"{{catalog_product_main_id}}\",\r\n                                    \"operator\": \"=\",\r\n                                    \"quantity\": 3\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"priority\": 11\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: cart condition to 3 item promo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created entity successfully\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"promotionId\": \"{{created_promotion_3item_id}}\",\r\n    \"ruleId\": \"{{created_rule_3item_id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/promotion-cart-rule",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"promotion-cart-rule"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "5 item rule",
							"item": [
								{
									"name": "SWA: create 5 item rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// marked as temp because of ticket SGSW6-88\r",
													"pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"create-rules\": {\r\n        \"entity\": \"rule\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_rule_5item_id}}\",\r\n                \"name\": \"API EXT: Main Product 5 qty rule\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"andContainer\",\r\n                        \"value\": null,\r\n                        \"children\": [\r\n                            {\r\n                                \"type\": \"cartLineItemWithQuantity\",\r\n                                \"value\": {\r\n                                    \"id\": \"{{catalog_product_main_id}}\",\r\n                                    \"operator\": \"=\",\r\n                                    \"quantity\": 5\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"priority\": 11\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: create 5 item promo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created entity successfully\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{created_promotion_5item_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API EXT: promo main prod 5 qty\",\r\n    \"code\": null,\r\n    \"exclusive\": false,\r\n    \"useCodes\": false,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"percentage\",\r\n            \"value\": 10\r\n        }\r\n    ],\r\n    \"salesChannels\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/promotion",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"promotion"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: cart condition to 5 item promo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created entity successfully\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"promotionId\": \"{{created_promotion_5item_id}}\",\r\n    \"ruleId\": \"{{created_rule_5item_id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/promotion-cart-rule",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"promotion-cart-rule"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4+ & 6- rule",
							"item": [
								{
									"name": "SWA: create 4+ item rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// marked as temp because of ticket SGSW6-88\r",
													"pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"create-rules\": {\r\n        \"entity\": \"rule\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_rule_4itemPlus_id}}\",\r\n                \"name\": \"API EXT: Main Product 4+ & -6 qty rule\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"andContainer\",\r\n                        \"value\": null,\r\n                        \"children\": [\r\n                            {\r\n                                \"type\": \"cartLineItemWithQuantity\",\r\n                                \"value\": {\r\n                                    \"id\": \"{{catalog_product_main_id}}\",\r\n                                    \"operator\": \">\",\r\n                                    \"quantity\": 4\r\n                                }\r\n                            },\r\n                            {\r\n                                \"type\": \"cartLineItemWithQuantity\",\r\n                                \"value\": {\r\n                                    \"id\": \"{{catalog_product_main_id}}\",\r\n                                    \"operator\": \"<\",\r\n                                    \"quantity\": 6\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"priority\": 12\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: create 4+ item promo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created entity successfully\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{created_promotion_4itemPlus_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API EXT: promo main prod 4+ & 6- qty\",\r\n    \"code\": null,\r\n    \"exclusive\": false,\r\n    \"useCodes\": false,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"fixed_unit\",\r\n            \"value\": 450\r\n        }\r\n    ],\r\n    \"salesChannels\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/promotion",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"promotion"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: cart condition to 4 item promo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created entity successfully\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"promotionId\": \"{{created_promotion_4itemPlus_id}}\",\r\n    \"ruleId\": \"{{created_rule_4itemPlus_id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/promotion-cart-rule",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"promotion-cart-rule"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SWA: create coupon code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created entity successfully\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_promotion_byCode_id}}\",\r\n    \"active\": true,\r\n    \"translations\": {\r\n        \"en-GB\": {\r\n            \"name\": \"API EXT: promo by code\"\r\n        },\r\n        \"de-DE\": {\r\n            \"name\": \"API EXT: promo by code (DE)\"\r\n        }\r\n    },\r\n    \"code\": \"{{created_promotion_byCode_code}}\",\r\n    \"exclusive\": false,\r\n    \"useCodes\": true,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 2.25\r\n        }\r\n    ],\r\n    \"salesChannels\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/promotion",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"promotion"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: re-index promo",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"offset\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/indexing/:indexer",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"indexing",
										":indexer"
									],
									"variable": [
										{
											"key": "indexer",
											"value": "promotion.indexer"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"/**",
							" * SW Token generation",
							" */",
							"var getToken = true;",
							"if (!pm.environment.get('gen_token_expires') || !pm.environment.get('gen_access_token')) {",
							"    console.log('Token or expiry date are missing');",
							"} else if (pm.environment.get('gen_token_expires') <= (new Date()).getTime()) {",
							"    console.log('Token is expired');",
							"} else {",
							"    getToken = false;",
							"}",
							"",
							"if (getToken === true) {",
							"    const createRequest = {",
							"        \"client_id\": pm.environment.get(\"sw_client_id\"),",
							"        \"grant_type\": \"password\",",
							"        \"scopes\": \"write\",",
							"        \"username\": pm.environment.get(\"sw_admin\"),",
							"        \"password\": pm.environment.get(\"sw_pass\")",
							"    };",
							"    const refreshRequest = {",
							"        \"grant_type\": \"refresh_token\",",
							"        \"client_id\": pm.environment.get(\"sw_client_id\"),",
							"        \"refresh_token\": pm.environment.get(\"gen_refresh_token\")",
							"    };",
							"    // SW Auth",
							"    const authRequest = {",
							"        url: pm.globals.replaceIn(pm.environment.replaceIn(pm.environment.get(\"sw_endpoint_auth\"))),",
							"        method: 'POST',",
							"        header: 'Accept: application/json\\nContent-Type: application/json; charset=utf-8',",
							"        body: {",
							"            mode: 'application/json'",
							"        }",
							"    };",
							"    // set body depending on type of request needed",
							"    authRequest.body.raw = JSON.stringify(pm.environment.get(\"gen_refresh_token\") ? refreshRequest : createRequest);",
							"    pm.sendRequest(authRequest, function (err, res) {",
							"        if (res.code !== 200) {",
							"            pm.environment.unset('gen_access_token');",
							"            pm.environment.unset('gen_token_expires');",
							"            pm.environment.unset('gen_refresh_token');",
							"            console.log('Invalidated refresh token');",
							"            return;",
							"        }",
							"        ",
							"        var responseJson = res.json();",
							"        pm.environment.set('gen_access_token', responseJson.access_token)",
							"",
							"        var expiryDate = new Date();",
							"        expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
							"        pm.environment.set('gen_token_expires', expiryDate.getTime());",
							"        pm.environment.set('gen_refresh_token', responseJson.refresh_token);",
							"        console.log('Saved the token and expiry date');",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "update",
			"item": [
				{
					"name": "WebC: new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_new}}",
							"host": [
								"{{domain}}{{endpoint_cart_new}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: add products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"pm.test('that the cart is not empty', () => {\r",
									"    pm.expect(response).to.be.an('object').and.not.empty\r",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
									"    pm.expect(response.cartItems.length).to.equal(2)\r",
									"})\r",
									"\r",
									"pm.test('the first product is in the cart', () => {\r",
									"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
									"    pm.expect(lineItem).to.be.an('object')\r",
									"    pm.expect(lineItem.quantity).to.eq(1)\r",
									"    pm.environment.set('gen_lineItem_main_1', lineItem.id)\r",
									"})\r",
									"\r",
									"pm.test('the second product is in the cart', () => {\r",
									"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_advPrices_id'))\r",
									"    pm.expect(lineItem).to.be.an('object')\r",
									"    pm.expect(lineItem.quantity).to.eq(1)\r",
									"    pm.environment.set('gen_lineItem_advPrices_1', lineItem.id)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: update Product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CartItem\": [\r\n        {\r\n            \"cartItemId\": \"{{gen_lineItem_main_1}}\",\r\n            \"quantity\": 2\r\n        },\r\n        {\r\n            \"CartItemId\": \"{{gen_lineItem_advPrices_1}}\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_update}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"pm.test('that the cart is not empty', () => {\r",
									"    pm.expect(response).to.be.an('object').and.not.empty\r",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
									"    pm.expect(response.cartItems.length).to.equal(2)\r",
									"})\r",
									"\r",
									"pm.test('the first product is in the cart', () => {\r",
									"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
									"    pm.expect(lineItem).to.be.an('object')\r",
									"    pm.expect(lineItem.quantity).to.eq(2)\r",
									"})\r",
									"\r",
									"pm.test('the second product is in the cart', () => {\r",
									"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_advPrices_id'))\r",
									"    pm.expect(lineItem).to.be.an('object')\r",
									"    pm.expect(lineItem.quantity).to.eq(3)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: update (max stock)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Check error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
									"    pm.expect(jsonData.error.errors).to.not.be.empty;\r",
									"    const error = jsonData.error.errors.pop();\r",
									"    pm.expect(error.code).to.eq('ESTOCKREACHED');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartItems\": [\r\n        {\r\n            \"cartItemId\": \"{{gen_lineItem_main_1}}\",\r\n            \"quantity\": 9999\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_update}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: get Cart (max stock)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"pm.test('that the cart is not empty', () => {\r",
									"    pm.expect(response).to.be.an('object').and.not.empty\r",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
									"    pm.expect(response.cartItems.length).to.equal(2)\r",
									"})\r",
									"\r",
									"pm.test('the first product is in the cart', () => {\r",
									"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
									"    pm.expect(lineItem).to.be.an('object')\r",
									"    pm.expect(lineItem.quantity).to.eq(100)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delete",
			"item": [
				{
					"name": "WebC: new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_new}}",
							"host": [
								"{{domain}}{{endpoint_cart_new}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: add Products (2x)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: add Products 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_freeShip}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"pm.test('that the cart is not empty anymore', () => {\r",
									"    pm.expect(response).to.be.an('object').and.not.empty\r",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
									"    pm.expect(response.cartItems.length).to.equal(3)\r",
									"})\r",
									"\r",
									"pm.test('the first product is in the cart', () => {\r",
									"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
									"    pm.expect(lineItem).to.be.an('object')\r",
									"    pm.expect(lineItem.quantity).to.eq(1)\r",
									"    pm.environment.set('gen_lineItem_main_2', lineItem.id)\r",
									"})\r",
									"\r",
									"pm.test('the second product is in the cart', () => {\r",
									"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_advPrices_id'))\r",
									"    pm.expect(lineItem).to.be.an('object')\r",
									"    pm.expect(lineItem.quantity).to.eq(1)\r",
									"    pm.environment.set('gen_lineItem_advPrices_2', lineItem.id)\r",
									"})\r",
									"\r",
									"pm.test('the third product is in the cart', () => {\r",
									"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_freeShip'))\r",
									"    pm.expect(lineItem).to.be.an('object')\r",
									"    pm.expect(lineItem.quantity).to.eq(1)\r",
									"    pm.environment.set('gen_lineItem_freeShip_2', lineItem.id)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: Delete 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"CartItemIds\": [\n        \"{{gen_lineItem_main_2}}\",\n        \"{{gen_lineItem_freeShip_2}}\"\n    ]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_delete}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"pm.test('that the cart is not empty', () => {\r",
									"    pm.expect(response).to.be.an('object').and.not.empty\r",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
									"    pm.expect(response.cartItems.length).to.equal(1)\r",
									"})\r",
									"\r",
									"pm.test('the second product is in the cart', () => {\r",
									"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_advPrices_id'))\r",
									"    pm.expect(lineItem).to.be.an('object')\r",
									"    pm.expect(lineItem.quantity).to.eq(1)\r",
									"    pm.environment.unset('gen_lineItem_main_2')\r",
									"    pm.environment.unset('gen_lineItem_freeShip_2')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: Delete 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartItemIds\": [\n        \"{{gen_lineItem_advPrices_2}}\"\n    ]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_delete}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"pm.test('that the cart is not empty', () => {\r",
									"    pm.expect(response).to.be.an('object').and.not.empty\r",
									"    pm.expect(response.cartItems).to.be.an('array')\r",
									"    pm.expect(response.cartItems.length).to.equal(0)\r",
									"    pm.environment.unset('gen_lineItem_advPrices_2')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Errors",
			"item": [
				{
					"name": "Stock / steps",
					"item": [
						{
							"name": "SWA: create soon no stock prod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"2fd33d675f2f48da85d10be4a976578c\",\r\n        \"name\" : \"API: soon to be out of stock\",\r\n        \"productNumber\" : \"SG.CONNECT.DEMO.NO.STOCK.02\",\r\n        \"stock\": 100,\r\n        \"isCloseout\": true,\r\n        \"releaseDate\": \"2022-01-29T11:00:04.389+00:00\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_advPrices_id}}",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"clone",
										"product",
										"{{catalog_product_advPrices_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"2fd33d675f2f48da85d10be4a976578c\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: update too many",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Check error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
											"    pm.expect(jsonData.error.errors).to.not.be.empty;\r",
											"    const error = jsonData.error.errors.pop();\r",
											"    pm.expect(error.code).to.eq('ESTOCKREACHED');\r",
											"    pm.expect(error.messageParams.messageKey).to.eq('product-stock-reached');\r",
											"    // functionality is only supported in SW 6.4.10+\r",
											"    if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.7.0')) {\r",
											"        console.log('Skippin testing params as they are not introduced yet')\r",
											"        return;\r",
											"    }\r",
											"    pm.expect(error.messageParams.name, 'name param should exist').to.exist;\r",
											"    pm.expect(error.messageParams.quantity, 'qty param should exist').to.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CartItem\": [\r\n        {\r\n            \"cartItemId\": \"2fd33d675f2f48da85d10be4a976578c\",\r\n            \"quantity\": 101\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_update}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: reduce stock to 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product updated\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"stock\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/product/:id",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"product",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2fd33d675f2f48da85d10be4a976578c"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: re-index 1 prod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ids\": [\n        \"2fd33d675f2f48da85d10be4a976578c\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/index-products",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"index-products"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: get Cart (no items)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"\r",
											"// items out of stock are currently handled this way\r",
											"pm.test('that the cart is empty', () => {\r",
											"    pm.expect(response).to.be.an('object').and.not.empty\r",
											"    pm.expect(response.cartItems).to.be.an('array').and.be.empty\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: min purchase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product updated\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"stock\": 10,\r\n    \"minPurchase\": 3,\r\n    \"purchaseSteps\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/product/:id",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"product",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2fd33d675f2f48da85d10be4a976578c"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: re-index 1 prod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ids\": [\n        \"2fd33d675f2f48da85d10be4a976578c\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/index-products",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"index-products"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Product (1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
											"});\r",
											"\r",
											"pm.test(\"Check error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
											"    pm.expect(jsonData.error.errors).to.not.be.empty;\r",
											"    const error = jsonData.error.errors.pop();\r",
											"    pm.expect(error.code).to.eq('EPURCHASESTEPS');\r",
											"    pm.expect(error.messageParams.name).to.exist;\r",
											"    pm.expect(error.messageParams.quantity).to.exist;\r",
											"    pm.expect(error.messageParams.messageKey).to.eq('min-order-quantity');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"2fd33d675f2f48da85d10be4a976578c\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: get Cart (qty check)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"pm.test('that the cart is not empty', () => {\r",
											"    pm.expect(response).to.be.an('object').and.not.empty\r",
											"    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
											"    pm.expect(response.cartItems.length).to.equal(1)\r",
											"})\r",
											"\r",
											"pm.test('the cart qty is correct', () => {\r",
											"    const lineItem = response.cartItems.find(item => item.product.id === '2fd33d675f2f48da85d10be4a976578c')\r",
											"    pm.expect(lineItem).to.be.an('object')\r",
											"    pm.expect(lineItem.quantity).to.eq(3)\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Product (1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
											"});\r",
											"\r",
											"pm.test(\"Check error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
											"    pm.expect(jsonData.error.errors).to.not.be.empty;\r",
											"    const error = jsonData.error.errors.pop();\r",
											"    pm.expect(error.code).to.eq('EPURCHASESTEPS');\r",
											"\r",
											"    // params were fixed in this version\r",
											"    if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.7.0')) {\r",
											"        console.log('Skippin testing params as they are not introduced yet')\r",
											"        return;\r",
											"    }\r",
											"    pm.expect(error.messageParams.name).to.exist;\r",
											"    pm.expect(error.messageParams.quantity).to.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"2fd33d675f2f48da85d10be4a976578c\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: cleanup product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product deleted\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/product/:id",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"product",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2fd33d675f2f48da85d10be4a976578c"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "After adding the product to cart, reducing the product's stock will result in not having the item in cart anymore. Maybe will change one day"
				},
				{
					"name": "WebC: add Products (disabled)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
									"});\r",
									"\r",
									"pm.test(\"Check error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
									"    pm.expect(jsonData.error.errors).to.not.be.empty;\r",
									"    const error = jsonData.error.errors.pop();\r",
									"    pm.expect(error.code).to.eq('ENOTFOUND');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_disabled}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: add Products (no stock)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
									"});\r",
									"\r",
									"pm.test(\"Check error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
									"    pm.expect(jsonData.error.errors).to.not.be.empty;\r",
									"    const error = jsonData.error.errors.pop();\r",
									"    pm.expect(error.code).to.eq('ESTOCKREACHED');\r",
									"    pm.expect(error.messageParams.messageKey).to.eq('product-out-of-stock');\r",
									"    // making sure the name exists even though we are not using in this string yet\r",
									"    pm.expect(error.messageParams.name).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{created_product_noStock_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: Delete no exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql('ECART');",
									"});",
									"",
									"pm.test(\"Check error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql('ECART');",
									"    pm.expect(jsonData.error.errors).to.not.be.empty;",
									"    const error = jsonData.error.errors.pop();",
									"    pm.expect(error.code).to.eq('ENOTFOUND');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"CartItemIds\": [\n        \"a389bd9d710c437a990565dd2e803f66\"\n    ]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_delete}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: update no exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
									"});\r",
									"\r",
									"pm.test(\"Check error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
									"    pm.expect(jsonData.error.errors).to.not.be.empty;\r",
									"    const error = jsonData.error.errors.pop();\r",
									"    pm.expect(error.code).to.eq('ENOTFOUND');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CartItem\": [\r\n        {\r\n            \"cartItemId\": \"7013a4d06c194e6c8117192f137dc24a\",\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_update}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: add coupons no exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// if cart has no items, it will be 200\r",
									"// if it does have items, it will be an error\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Check error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.code).to.eql('ECART');\r",
									"    pm.expect(jsonData.error.errors).to.not.be.empty;\r",
									"    const error = jsonData.error.errors.pop();\r",
									"    pm.expect(error.code).to.eq('EINVALIDCOUPON');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"couponCodes\": [\r\n        \"LALA\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_coupons_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_coupons_add}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "coupons",
			"item": [
				{
					"name": "Code & Rule",
					"item": [
						{
							"name": "WebC: new cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_new}}",
									"host": [
										"{{domain}}{{endpoint_cart_new}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Products",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Coupons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// removed promotion success error check"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_byCode_code}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_coupons_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_coupons_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: get Cart (check coupon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(1);\r",
											"})\r",
											"pm.test('the first coupon is in the cart', () => {\r",
											"    const lineItem = response.cartItems.find(item => item.coupon && item.coupon.code === pm.environment.get('created_promotion_byCode_code'))\r",
											"    pm.expect(lineItem).to.be.an('object')\r",
											"    pm.expect(lineItem.quantity).to.eq(1)\r",
											"    pm.expect(lineItem.type).to.eq('coupon')\r",
											"    pm.expect(lineItem.coupon.label).to.contain('API EXT: promo by code')\r",
											"    pm.expect(lineItem.coupon.savedPrice.type).to.eq('fixed')\r",
											"    pm.expect(lineItem.coupon.savedPrice.value).to.eq(2.25)\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 4\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: get Cart (check promo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(3);\r",
											"})\r",
											"pm.test('the first coupon is in the cart', () => {\r",
											"    const lineItem = response.cartItems.find(item => item.coupon && item.coupon.savedPrice && item.coupon.savedPrice.type === 'percentage')\r",
											"    pm.expect(lineItem).to.be.an('object', 'should have found line item')\r",
											"    pm.expect(lineItem.quantity).to.eq(1)\r",
											"    pm.expect(lineItem.type).to.eq('coupon')\r",
											"    pm.expect(lineItem.coupon.savedPrice.type).to.eq('percentage')\r",
											"    pm.expect(lineItem.coupon.savedPrice.value).to.eq(10)\r",
											"    pm.expect(lineItem.coupon.label).to.eq('API EXT: promo main prod 5 qty')\r",
											"    pm.environment.set('gen_lineItem_rule5_id', lineItem.id);\r",
											"})\r",
											"\r",
											"const discountTotal = response.totals.find(total => total.type === 'discount');\r",
											"pm.test('check totals', () => {\r",
											"    pm.expect(discountTotal.amount).to.eq(479.98)\r",
											"    pm.expect(discountTotal.subTotals).to.to.have.length(3)\r",
											"})\r",
											"\r",
											"pm.test('check discount totals', () => {\r",
											"    const percentDiscount = discountTotal.subTotals.find(total => total.label === 'API EXT: promo main prod 5 qty')\r",
											"    pm.expect(percentDiscount).to.be.an('object', 'Should have found discount')\r",
											"    pm.expect(percentDiscount.amount).to.eq(247.98)\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: Delete coupon",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_byCode_code}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_coupons_delete}}",
									"host": [
										"{{domain}}{{endpoint_cart_coupons_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: getCart (no coupon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check product count', () => {\r",
											"    const products = response.cartItems.filter(item => item.type === 'product')\r",
											"    pm.expect(products).to.have.length(1);\r",
											"})\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(2);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: Delete Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"couponCodes\": [\r\n        \"{{gen_lineItem_rule5_id}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_coupons_delete}}",
									"host": [
										"{{domain}}{{endpoint_cart_coupons_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: get Cart (no rule)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check product count', () => {\r",
											"    const products = response.cartItems.filter(item => item.type === 'product')\r",
											"    pm.expect(products).to.have.length(1);\r",
											"})\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(1);\r",
											"    pm.environment.unset(\"gen_lineItem_rule5_id\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Saved coupon (by code)",
					"item": [
						{
							"name": "WebC: new cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_new}}",
									"host": [
										"{{domain}}{{endpoint_cart_new}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Products",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Coupons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_3item_code}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_coupons_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_coupons_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: check no coupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Products",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: check coupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(1);\r",
											"})\r",
											"pm.test('the first coupon is in the cart', () => {\r",
											"    const lineItem = response.cartItems.find(item => item.coupon && item.coupon.code === pm.environment.get('created_promotion_3item_code'))\r",
											"    pm.expect(lineItem).to.be.an('object')\r",
											"    pm.expect(lineItem.quantity).to.eq(1)\r",
											"    pm.expect(lineItem.type).to.eq('coupon')\r",
											"    pm.expect(lineItem.coupon.label).to.eq('API EXT: promo 3item code')\r",
											"    pm.expect(lineItem.coupon.savedPrice.type).to.eq('fixed')\r",
											"    pm.expect(lineItem.coupon.savedPrice.value).to.eq(1.73)\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: Delete coupon",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_3item_code}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_coupons_delete}}",
									"host": [
										"{{domain}}{{endpoint_cart_coupons_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: no coupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check product count', () => {\r",
											"    const products = response.cartItems.filter(item => item.type === 'product')\r",
											"    pm.expect(products).to.have.length(1);\r",
											"})\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests coupon caching & ability to manually remove.\n\nRemove by code (this seems to have been working before, but found not to be when testing because removal can be also done by ID, see SW6M-31)"
				},
				{
					"name": "Saved coupon (by id)",
					"item": [
						{
							"name": "WebC: new cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_new}}",
									"host": [
										"{{domain}}{{endpoint_cart_new}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Products",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Coupons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_3item_code}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_coupons_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_coupons_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: check coupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(1);\r",
											"})\r",
											"pm.test('the first coupon is in the cart', () => {\r",
											"    const lineItem = response.cartItems.find(item => item.coupon && item.coupon.code === pm.environment.get('created_promotion_3item_code'))\r",
											"    pm.expect(lineItem).to.be.an('object')\r",
											"    pm.expect(lineItem.quantity).to.eq(1)\r",
											"    pm.expect(lineItem.type).to.eq('coupon')\r",
											"    pm.expect(lineItem.coupon.label).to.eq('API EXT: promo 3item code')\r",
											"    pm.expect(lineItem.coupon.savedPrice.type).to.eq('fixed')\r",
											"    pm.expect(lineItem.coupon.savedPrice.value).to.eq(1.73)\r",
											"    pm.environment.set('gen_lineItem_promoThree_id', lineItem.id);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: Delete coupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"couponCodes\": [\r\n        \"{{gen_lineItem_promoThree_id}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_coupons_delete}}",
									"host": [
										"{{domain}}{{endpoint_cart_coupons_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: no coupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check product count', () => {\r",
											"    const products = response.cartItems.filter(item => item.type === 'product')\r",
											"    pm.expect(products).to.have.length(1);\r",
											"})\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(0);\r",
											"    pm.environment.unset('gen_lineItem_promoThree_id');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Remove coupon by ID"
				},
				{
					"name": "Empty cart coupon",
					"item": [
						{
							"name": "add",
							"item": [
								{
									"name": "WebC: new cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_new}}",
											"host": [
												"{{domain}}{{endpoint_cart_new}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WebC: add Coupons",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_3item_code}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_coupons_add}}",
											"host": [
												"{{domain}}{{endpoint_cart_coupons_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WebC: add Products (1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_products_add}}",
											"host": [
												"{{domain}}{{endpoint_cart_products_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WebC: add Products (2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_products_add}}",
											"host": [
												"{{domain}}{{endpoint_cart_products_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WebC: check coupon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"const response = pm.response.json()\r",
													"\r",
													"pm.test('check coupon count', () => {\r",
													"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
													"    pm.expect(coupons).to.have.length(1);\r",
													"})\r",
													"pm.test('the first coupon is in the cart', () => {\r",
													"    const lineItem = response.cartItems.find(item => item.coupon && item.coupon.code === pm.environment.get('created_promotion_3item_code'))\r",
													"    pm.expect(lineItem).to.be.an('object')\r",
													"    pm.expect(lineItem.quantity).to.eq(1)\r",
													"    pm.expect(lineItem.type).to.eq('coupon')\r",
													"    pm.expect(lineItem.coupon.label).to.eq('API EXT: promo 3item code')\r",
													"    pm.expect(lineItem.coupon.savedPrice.type).to.eq('fixed')\r",
													"    pm.expect(lineItem.coupon.savedPrice.value).to.eq(1.73)\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_get}}",
											"host": [
												"{{domain}}{{endpoint_cart_get}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update",
							"item": [
								{
									"name": "WebC: new cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_new}}",
											"host": [
												"{{domain}}{{endpoint_cart_new}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WebC: add Coupons",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"couponCodes\": [\r\n        \"{{created_promotion_3item_code}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_coupons_add}}",
											"host": [
												"{{domain}}{{endpoint_cart_coupons_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WebC: add Products (1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_products_add}}",
											"host": [
												"{{domain}}{{endpoint_cart_products_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WebC: getCart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json()\r",
													"pm.test('that the cart is not empty', () => {\r",
													"    pm.expect(response).to.be.an('object').and.not.empty\r",
													"    pm.expect(response.cartItems).to.be.an('array').and.not.empty\r",
													"    pm.expect(response.cartItems.length).to.equal(1)\r",
													"})\r",
													"\r",
													"pm.test('the first product is in the cart', () => {\r",
													"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
													"    pm.expect(lineItem).to.be.an('object')\r",
													"    pm.expect(lineItem.quantity).to.eq(1)\r",
													"    pm.environment.set('gen_lineItem_main_2', lineItem.id)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_get}}",
											"host": [
												"{{domain}}{{endpoint_cart_get}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WebC: update Product 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"CartItem\": [\r\n        {\r\n            \"cartItemId\": \"{{gen_lineItem_main_2}}\",\r\n            \"quantity\": 3\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_products_update}}",
											"host": [
												"{{domain}}{{endpoint_cart_products_update}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "WebC: check coupon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"const response = pm.response.json()\r",
													"\r",
													"pm.test('check coupon count', () => {\r",
													"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
													"    pm.expect(coupons).to.have.length(1);\r",
													"})\r",
													"pm.test('the first coupon is in the cart', () => {\r",
													"    const lineItem = response.cartItems.find(item => item.coupon && item.coupon.code === pm.environment.get('created_promotion_3item_code'))\r",
													"    pm.expect(lineItem).to.be.an('object')\r",
													"    pm.expect(lineItem.quantity).to.eq(1)\r",
													"    pm.expect(lineItem.type).to.eq('coupon')\r",
													"    pm.expect(lineItem.coupon.label).to.eq('API EXT: promo 3item code')\r",
													"    pm.expect(lineItem.coupon.savedPrice.type).to.eq('fixed')\r",
													"    pm.expect(lineItem.coupon.savedPrice.value).to.eq(1.73)\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{domain}}{{endpoint_cart_get}}",
											"host": [
												"{{domain}}{{endpoint_cart_get}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Rule Auto-remove",
					"item": [
						{
							"name": "WebC: new cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_new}}",
									"host": [
										"{{domain}}{{endpoint_cart_new}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 5\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: check promo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(2);\r",
											"})\r",
											"pm.test('the first product is in the cart', () => {\r",
											"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
											"    pm.expect(lineItem).to.be.an('object')\r",
											"    pm.expect(lineItem.quantity).to.eq(5)\r",
											"    pm.environment.set('gen_lineItem_main_3', lineItem.id)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: update to qty 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartItems\": [\r\n        {\r\n            \"cartItemId\": \"{{gen_lineItem_main_3}}\",\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_update}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: check promo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check coupon count', () => {\r",
											"    const coupons = response.cartItems.filter(item => item.type === 'coupon')\r",
											"    pm.expect(coupons).to.have.length(0);\r",
											"})\r",
											"pm.test('the first product is in the cart', () => {\r",
											"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('catalog_product_main_id'))\r",
											"    pm.expect(lineItem).to.be.an('object')\r",
											"    pm.expect(lineItem.quantity).to.eq(2)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "totals check",
			"item": [
				{
					"name": "Unit check",
					"item": [
						{
							"name": "Create unit variant",
							"item": [
								{
									"name": "SWA: create unit configurable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_unitKg_id}}\",\r\n        \"name\" : \"API: unit product\",\r\n        \"productNumber\" : \"SG.EXT.SW6.CART.UNIT.KG.CONFIG\",\r\n        \"stock\": 9999,\r\n        \"isCloseout\": true,\r\n        \"releaseDate\": \"2022-11-08T11:00:04.389+00:00\",\r\n        \"price\": [\r\n            {\r\n                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                \"gross\": 20,\r\n                \"net\": 18,\r\n                \"linked\": true\r\n            }\r\n        ],\r\n        \"purchaseUnit\": 1\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/product/:productId",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"product",
												":productId"
											],
											"variable": [
												{
													"key": "productId",
													"value": "{{catalog_product_main_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: create child (5kg)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-product\": {\r\n        \"entity\": \"product\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_product_unitKg_child1_id}}\",\r\n                \"parentId\": \"{{created_product_unitKg_id}}\",\r\n                \"options\": [\r\n                    {\r\n                        \"id\": \"{{gen_option1_id}}\"\r\n                    }\r\n                ],\r\n                \"price\": [\r\n                    {\r\n                        \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                        \"gross\": 120,\r\n                        \"net\": 110,\r\n                        \"linked\": true\r\n                    }\r\n                ],\r\n                \"productNumber\": \"SG.EXT.SW6.CART.UNIT.KG.VARIANT.1\",\r\n                \"stock\": 999,\r\n                \"purchaseUnit\": 5,\r\n                \"unitId\": \"{{created_unit_kg_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: create child (1kg)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-product\": {\r\n        \"entity\": \"product\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_product_unitKg_child2_id}}\",\r\n                \"parentId\": \"{{created_product_unitKg_id}}\",\r\n                \"options\": [\r\n                    {\r\n                        \"id\": \"{{gen_option2_id}}\"\r\n                    }\r\n                ],\r\n                \"productNumber\": \"SG.EXT.SW6.CART.UNIT.KG.VARIANT.2\",\r\n                \"stock\": 999,\r\n                \"unitId\": \"{{created_unit_kg_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: create child 3 (no kg)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-product\": {\r\n        \"entity\": \"product\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"9fa6061e07fb411da2d76669d485f485\",\r\n                \"parentId\": \"{{created_product_unitKg_id}}\",\r\n                \"options\": [\r\n                    {\r\n                        \"id\": \"{{gen_option3_id}}\"\r\n                    }\r\n                ],\r\n                \"productNumber\": \"SG.EXT.SW6.CART.UNIT.KG.VARIANT.3\",\r\n                \"stock\": 999\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: create child (.25)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-product\": {\r\n        \"entity\": \"product\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_product_unitKg_child4_id}}\",\r\n                \"parentId\": \"{{created_product_unitKg_id}}\",\r\n                \"options\": [\r\n                    {\r\n                        \"id\": \"{{gen_option1_id}}\"\r\n                    }\r\n                ],\r\n                \"price\": [\r\n                    {\r\n                        \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                        \"gross\": 5.23,\r\n                        \"net\": 4.76,\r\n                        \"linked\": true\r\n                    }\r\n                ],\r\n                \"productNumber\": \"SG.EXT.SW6.CART.UNIT.KG.VARIANT.4\",\r\n                \"stock\": 999,\r\n                \"purchaseUnit\": 0.25,\r\n                \"unitId\": \"{{created_unit_kg_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "WebC: new cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_new}}",
									"host": [
										"{{domain}}{{endpoint_cart_new}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: add variants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{created_product_unitKg_child1_id}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"productId\": \"{{created_product_unitKg_child2_id}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"productId\": \"{{created_product_unitKg_child3_id}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"productId\": \"{{created_product_unitKg_child4_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "WebC: get Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"\r",
											"pm.test('check price info', () => {\r",
											"    const foundItem = getProductById(response.cartItems, pm.environment.get('created_product_unitKg_child1_id'));\r",
											"    pm.expect(foundItem).to.not.be.undefined;\r",
											"    pm.expect(foundItem.product.price).to.haveOwnProperty('info').to.eq('5 kilo (24,00 € / 1 kilo)');\r",
											"});\r",
											"\r",
											"pm.test('check price info', () => {\r",
											"    const foundItem = getProductById(response.cartItems, pm.environment.get('created_product_unitKg_child2_id'));\r",
											"    pm.expect(foundItem).to.not.be.undefined;\r",
											"    pm.expect(foundItem.product.price).to.haveOwnProperty('info').to.eq('1 kilo (20,00 € / 1 kilo)');\r",
											"});\r",
											"\r",
											"pm.test('check no price info', () => {\r",
											"    const foundItem = getProductById(response.cartItems, pm.environment.get('created_product_unitKg_child3_id'));\r",
											"    pm.expect(foundItem).to.not.be.undefined;\r",
											"    pm.expect(foundItem.product.price.info).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test('check price info', () => {\r",
											"    const foundItem = getProductById(response.cartItems, pm.environment.get('created_product_unitKg_child4_id'));\r",
											"    pm.expect(foundItem).to.not.be.undefined;\r",
											"    pm.expect(foundItem.product.price).to.haveOwnProperty('info').to.eq('0,25 kilo (20,92 € / 1 kilo)');\r",
											"});\r",
											"\r",
											"function getProductById(list, id) {\r",
											"    return list.find(item => item.id === id);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: delete unit prod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/product/:productId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"product",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{created_product_unitKg_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check purchaseUnit",
					"item": [
						{
							"name": "SWA: create noPurchase unit product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_noPurchseUnit_id}}\",\r\n        \"name\" : \"API: no purchaseUnit/Selling Unit product \",\r\n        \"productNumber\" : \"SG.CONNECT.DEMO.NO.PURCHASE.UNIT.01\",\r\n        \"stock\": 100,\r\n        \"isCloseout\": true,\r\n        \"releaseDate\": \"2024-07-07T11:00:04.389+00:00\",\r\n        \"purchaseUnit\": null\r\n    },\r\n    \"cloneChildren\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/clone/product/:productId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"clone",
										"product",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{catalog_product_main_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "new cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_new}}",
									"host": [
										"{{domain}}{{endpoint_cart_new}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "addProducts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{created_product_noPurchseUnit_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"pm.test('that the cart is not empty', () => {\r",
											"    pm.expect(response).to.be.an('object').and.not.empty;\r",
											"    pm.expect(response.cartItems).to.be.an('array').and.not.empty;\r",
											"    pm.expect(response.cartItems.length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test('the first product is in the cart', () => {\r",
											"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('created_product_noPurchseUnit_id'));\r",
											"    pm.expect(lineItem).to.be.an('object');\r",
											"    pm.expect(lineItem.quantity).to.eq(1);\r",
											"    pm.expect(lineItem.product.price).to.not.have.property('info');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: delete unit prod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/product/:productId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"product",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{created_product_noPurchseUnit_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "SW6M-100: Checks when \"Selling Unit\" (purchaseUnit) is missing that we are not throwing an error"
				},
				{
					"name": "Unit info max details",
					"item": [
						{
							"name": "SWA: create gram unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unit created\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_unit_gramm}}\",\r\n    \"name\": \"gramm\",\r\n    \"shortCode\": \"g.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/unit",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"unit"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: create purchase Unit product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_fullPurchaseData_id}}\",\r\n        \"name\" : \"API: Full selling/purchase unit data\",\r\n        \"productNumber\" : \"SG.CONNECT.DEMO.FULL.UNIT.DATA.01\",\r\n        \"stock\": 100,\r\n        \"isCloseout\": true,\r\n        \"releaseDate\": \"2024-07-07T11:00:04.389+00:00\",\r\n        \"purchaseUnit\": 100,\r\n        \"referenceUnit\": 10,\r\n        \"packUnit\": \"crate\",\r\n        \"packUnitPlural\": \"crates\",\r\n        \"unitId\": \"{{created_unit_gramm}}\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/clone/product/:productId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"clone",
										"product",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{catalog_product_main_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "new cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_new}}",
									"host": [
										"{{domain}}{{endpoint_cart_new}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "addProducts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{created_product_fullPurchaseData_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_products_add}}",
									"host": [
										"{{domain}}{{endpoint_cart_products_add}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"pm.test('that the cart is not empty', () => {\r",
											"    pm.expect(response).to.be.an('object').and.not.empty;\r",
											"    pm.expect(response.cartItems).to.be.an('array').and.not.empty;\r",
											"    pm.expect(response.cartItems.length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test('check product info data', () => {\r",
											"    const lineItem = response.cartItems.find(item => item.product.id === pm.environment.get('created_product_fullPurchaseData_id'));\r",
											"    pm.expect(lineItem).to.be.an('object');\r",
											"    pm.expect(lineItem.quantity).to.eq(1);\r",
											"    pm.expect(lineItem.product.price).to.have.property('info');\r",
											"    pm.expect(lineItem.product.price.info).to.eq('100 gramm (49,60 € / 10 gramm)')\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{endpoint_cart_get}}",
									"host": [
										"{{domain}}{{endpoint_cart_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: delete sample prod",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/product/:productId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"product",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{created_product_fullPurchaseData_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: delete gram unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unit created\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_unit_gramm}}\",\r\n    \"name\": \"gramm\",\r\n    \"shortCode\": \"g.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/unit/:unitId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"unit",
										":unitId"
									],
									"variable": [
										{
											"key": "unitId",
											"value": "{{created_unit_gramm}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "SW6M-100: Checks when \"Selling Unit\" (purchaseUnit) is missing that we are not throwing an error"
				},
				{
					"name": "WebC: new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_new}}",
							"host": [
								"{{domain}}{{endpoint_cart_new}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: add products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        {\r\n            \"productId\": \"{{catalog_product_main_id}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "WebC: get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.test('check tax totals', () => {\r",
									"    const taxTotal = response.totals.find(total => total.type === 'tax');\r",
									"    pm.expect(taxTotal.label).to.eq('ApiteSW6Utility.cart.summaryTax')\r",
									"})\r",
									"\r",
									"pm.test('check shipping totals', () => {\r",
									"    const taxTotal = response.totals.find(total => total.type === 'shipping');\r",
									"    pm.expect(taxTotal.label).to.eq('ApiteSW6Utility.cart.summaryShipping')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "WebC: get checkout URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"has url\", function() {",
							"    pm.expect(response.url).to.be.a('string').to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "{{domain}}{{endpoint_checkout_url_get}}",
					"host": [
						"{{domain}}{{endpoint_checkout_url_get}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{gen_access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**",
					" * SW Token generation",
					" */",
					"var getToken = true;",
					"if (!pm.environment.get('gen_token_expires') || !pm.environment.get('gen_access_token')) {",
					"    console.log('Token or expiry date are missing');",
					"} else if (pm.environment.get('gen_token_expires') <= (new Date()).getTime()) {",
					"    console.log('Token is expired');",
					"} else {",
					"    getToken = false;",
					"}",
					"",
					"if (getToken === true) {",
					"    const createRequest = {",
					"        \"client_id\": pm.environment.get(\"sw_client_id\"),",
					"        \"grant_type\": \"password\",",
					"        \"scopes\": \"write\",",
					"        \"username\": pm.environment.get(\"sw_admin\"),",
					"        \"password\": pm.environment.get(\"sw_pass\")",
					"    };",
					"    const refreshRequest = {",
					"        \"grant_type\": \"refresh_token\",",
					"        \"client_id\": pm.environment.get(\"sw_client_id\"),",
					"        \"refresh_token\": pm.environment.get(\"gen_refresh_token\")",
					"    };",
					"    // SW Auth",
					"    const authRequest = {",
					"        url: pm.globals.replaceIn(pm.environment.replaceIn(pm.environment.get(\"sw_endpoint_auth\"))),",
					"        method: 'POST',",
					"        header: 'Accept: application/json\\nContent-Type: application/json; charset=utf-8',",
					"        body: {",
					"            mode: 'application/json'",
					"        }",
					"    };",
					"    // set body depending on type of request needed",
					"    authRequest.body.raw = JSON.stringify(pm.environment.get(\"gen_refresh_token\") ? refreshRequest : createRequest);",
					"    pm.sendRequest(authRequest, function (err, res) {",
					"        if (res.code !== 200) {",
					"            pm.environment.unset('gen_access_token');",
					"            pm.environment.unset('gen_token_expires');",
					"            pm.environment.unset('gen_refresh_token');",
					"            console.log('Invalidated refresh token');",
					"            return;",
					"        }",
					"        ",
					"        var responseJson = res.json();",
					"        pm.environment.set('gen_access_token', responseJson.access_token)",
					"",
					"        var expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
					"        pm.environment.set('gen_token_expires', expiryDate.getTime());",
					"        pm.environment.set('gen_refresh_token', responseJson.refresh_token);",
					"        console.log('Saved the token and expiry date');",
					"    });",
					"}",
					"",
					"/**",
					" * Global utility functions",
					" */",
					"Utility = {};",
					"// Version functionality",
					"Utility.version = {};",
					"const versionCompare = (a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' });",
					"Utility.version.isLT = (a, b) => versionCompare(a, b) < 0;"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// remove generated token data if not authorized",
					"if (pm.response.code === 401) {",
					"    console.log('Removing tokens due to 401 response. Please try again.');",
					"    pm.environment.unset('gen_access_token');",
					"    pm.environment.unset('gen_token_expires');",
					"    pm.environment.unset('gen_refresh_token');",
					"}"
				]
			}
		}
	]
}